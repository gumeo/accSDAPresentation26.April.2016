install.packages("devtools")
?sample
setwd("~/Documents/Spring2016/Presentations/RuserCopenhagen2016/Rcode")
library(accSDA)
library(R.matlab) # Need this to load the data
# This is a matlab file, load it to get an S3 object with its contents
SilDat <- readMat('./Silhouettes.mat')
class(SilDat)
coords <- SilDat$Xa
y <- rep(0,39)
y[SilDat$Male] <-1
y <- as.factor(y)
plot(coords[1,1:65],coords[1,66:130])
plot(coords[1,1:65],coords[1,66:130],asp=1)
plot(coords[1,1:65],coords[1,66:130],asp=1,type='l')
plot(coords[1,1:65],coords[1,66:130],asp=1,type='l',xlab = "",ylab = "",main = "One silhouette")
points(coords[1,1:65],coords[1,66:130])
plot(coords[1,1:65],coords[1,66:130],asp=1,type='l',xlab = "",ylab = "",main = "One silhouette observation")
points(coords[1,1:65],coords[1,66:130])
maleMean <- colMeans(coords[SilDat$Male,])
femaleMean <- colMeans(coords[SilDat$Fem,])
maleMean <- colMeans(coords[SilDat$Male,])
femaleMean <- colMeans(coords[SilDat$Fem,])
plot(maleMean[1:65], maleMean[66:130], asp=1, type='l',
xlab = "", ylab = "", main = "Male (black) vs Female (red)")
lines(femaleMean[1:65], femaleMean[66:130],col='red')
matplot(t(coords[,1:65]),t(coords[,66:130]),type = 'l',asp=1)
matplot(t(coords[,1:65]),t(coords[,66:130]),type = 'l',asp=1,
xlab = "", ylab="", main = "All the aligned data")
getwd()
library(accSDA)
library(R.matlab) # Need this to load the data
# This is a matlab file, load it to get a list with its contents
SilDat <- readMat('./Silhouettes.mat')
# Extract the coordinates of the silhouettes
coords <- SilDat$Xa
# Extract the labels, i.e. male or female
y <- rep(0,39)
y[SilDat$Male] <-1
y <- as.factor(y)
# Let's plot a single silhouette
# coords is an 39 by 130 matrix, each row is a sample
# and the first 65 variables are x coordinates and the latter are y coordinates.
plot(coords[1,1:65], coords[1,66:130], asp=1, type='l',
xlab = "", ylab = "", main = "One silhouette observation")
points(coords[1,1:65],coords[1,66:130])
# Visualize mean shape for male and female
maleMean <- colMeans(coords[SilDat$Male,])
femaleMean <- colMeans(coords[SilDat$Fem,])
plot(maleMean[1:65], maleMean[66:130], asp=1, type='l',
xlab = "", ylab = "", main = "Male (black) vs Female (red)")
lines(femaleMean[1:65], femaleMean[66:130],col='red')
# Plot all the data
matplot(t(coords[,1:65]),t(coords[,66:130]),type = 'l',asp=1,
xlab = "", ylab="", main = "All the aligned data")
resDef <- ASDA(coords,y,lam=0.002)
summary(resDef)
class(resDef)
resDef
?ASDA
lam <- seq(0.01,0.5,len=100)
lam
lam <- seq(0.01,0.5,len=100)
method <- "SDAAP"
control <- list(CV = TRUE,
folds = 10,
feat = 0.3,
quiet = FALSE)
# Run the algorithm
res <- ASDA(Xt = Xtrain,
Yt = Ytrain,
lam = lam,
method = method,
control = control)
res <- ASDA(Xt = coords,
Yt = y,
lam = lam,
method = method,
control = control)
barplot(t(res$beta))
lam <- seq(0.01,0.5,len=100)
method <- "SDAAP"
control <- list(CV = TRUE,
folds = 10,
feat = 0.5,
quiet = FALSE)
# Run the algorithm
res <- ASDA(Xt = coords,
Yt = y,
lam = lam,
method = method,
control = control)
barplot(t(res$beta))
lam <- seq(0.01,0.2,len=30)
method <- "SDAAP"
control <- list(CV = TRUE,
folds = 10,
feat = 0.5,
quiet = FALSE)
# Run the algorithm
res <- ASDA(Xt = coords,
Yt = y,
lam = lam,
method = method,
control = control)
barplot(t(res$beta))
lam <- seq(0.01,0.1,len=30)
method <- "SDAAP"
control <- list(CV = TRUE,
folds = 10,
feat = 0.5,
quiet = FALSE)
# Run the algorithm
res <- ASDA(Xt = coords,
Yt = y,
lam = lam,
method = method,
control = control)
barplot(t(res$beta))
lam <- seq(0.01,0.0.02,len=30)
method <- "SDAAP"
control <- list(CV = TRUE,
folds = 10,
feat = 0.5,
quiet = FALSE)
# Run the algorithm
res <- ASDA(Xt = coords,
Yt = y,
lam = lam,
method = method,
control = control)
barplot(t(res$beta))
lam <- seq(0.0001,0.004,len=30)
method <- "SDAAP"
control <- list(CV = TRUE,
folds = 10,
feat = 0.5,
quiet = FALSE)
# Run the algorithm
res <- ASDA(Xt = coords,
Yt = y,
lam = lam,
method = method,
control = control)
barplot(t(res$beta))
lam <- seq(0.0001,0.002,len=30)
method <- "SDAAP"
control <- list(CV = TRUE,
folds = 10,
feat = 0.5,
quiet = FALSE)
# Run the algorithm
res <- ASDA(Xt = coords,
Yt = y,
lam = lam,
method = method,
control = control)
barplot(t(res$beta))
res$classes
predict(res,train=coords)
?predict.ASDA
predict(res,newdata = =coords)
predict(res,newdata = coords)
dummy <- predict(res,newdata = coords)
y
dummy$class
y-dummy
12/39
as.numeric(dummy)
y-dummy$class
as.numeric(dummy$class)
as.numeric(y)
as.numeric(dummy$class)-as.numeric(y)
abs(as.numeric(dummy$class)-as.numeric(y))
sum(abs(as.numeric(dummy$class)-as.numeric(y)))
12/39
res$lambda
vals <- coords%*%res$beta
plot(vals)
plot(vals,col=y)
plot(coords%*%resDef$beta,col=y)
meanShape <- colMeans(coords)
res$beta!=0
colFac <- rep(0,130)
colFac[res$beta!=0] <- 1
colFac
colFac <- colFac[1:65]+colFac[66:130]
colFac
colFac <- as.factor(colFac)
plot(meanShape[1:65], meanShape[66:130], asp=1, type='l',
xlab = "", ylab = "", main = "Non-zero parameters",col=colFac)
plot(meanShape[1:65], meanShape[66:130], asp=1, type='l',
xlab = "", ylab = "", main = "Non-zero parameters")
plot(meanShape[1:65], meanShape[66:130], asp=1, type='l',
xlab = "", ylab = "", main = "Non-zero parameters")
points(meanShape[1:65], meanShape[66:130], col=colFac)
38/861
